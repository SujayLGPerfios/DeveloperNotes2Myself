package topics.camel;

import org.apache.camel.CamelContext;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.freemarker.FreemarkerConstants;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.log4j.PropertyConfigurator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class P019_CamelFreemarkerComponent {

    public static void main(String[] args) {
        // Enable log4J Logging
        String log4jPropertiesPath = "src/topics/camel/P004_log4j.properties";
        PropertyConfigurator.configure(log4jPropertiesPath);

        CamelContext context = new DefaultCamelContext();

        try {
            context.addRoutes(new RouteBuilder() {
                @Override
                public void configure() throws Exception {

                    from("direct:start")
                            .log("Received Message is ${body} and Headers are ${headers}")
                            // Change the template file name here
                            .setHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI).constant("topics/camel/P019_Template-3.ftl")
                            // Use dummy since the template file name comes from the header above
                            .to("freemarker:dummy?contentCache=false")
                            .log("Received Message is ${body} and Headers are ${headers}")
                            .to("file:/tmp/output?fileName=output.html");
                }
            });

            context.start();

            // Get an object holding all template variables in the Freemarker Template
            Map<String, Object> headers = fillTemplateVariables(context);

            // Send a direct start to begin the route processing
            ProducerTemplate producer = context.createProducerTemplate();
            producer.sendBodyAndHeaders("direct:start", "Some dummy text as body", headers);

            Thread.sleep(5000);

            context.stop();
        } catch (Exception e) {
            System.out.println("Exception : " + e);
        }
    }

    private static Map<String, Object> fillTemplateVariables(CamelContext context) {
        Map<String, Object> headers = new HashMap<String, Object>();

        // A string passed to the template
        headers.put("title", "Webpage Generated by Camel Freemarker");

        // A data object passed to template
        headers.put("dataObject", new P019_DataObject("A Data Object", "Dilbert"));

        // A list of data objects passed to template
        List<P019_DataObject> listOfJavaObjects = new ArrayList<P019_DataObject>();
        listOfJavaObjects.add(new P019_DataObject("Android", "Google"));
        listOfJavaObjects.add(new P019_DataObject("iOS", "Apple"));
        listOfJavaObjects.add(new P019_DataObject("Ubuntu", "Canonical"));
        listOfJavaObjects.add(new P019_DataObject("Windows7", "Microsoft"));
        headers.put("listOfDataObjects", listOfJavaObjects);

        return headers;
    }
}
